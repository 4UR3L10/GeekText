'use strict';

/* eslint-env node, mocha */

const expect = require('chai').expect;
const docResult = require('../../../lib/DevAPI/DocResult');
const td = require('testdouble');

describe('DocResult', () => {
    let toArray;

    beforeEach('create fakes', () => {
        toArray = td.function();
    });

    afterEach('reset fakes', () => {
        td.reset();
    });

    context('fetchAll()', () => {
        it('returns an empty array when there are no items in the result set', () => {
            expect(docResult().fetchAll()).to.deep.equal([]);
            expect(docResult({ results: undefined }).fetchAll()).to.deep.equal([]);
            expect(docResult({ results: [] }).fetchAll()).to.deep.equal([]);
            expect(docResult({ results: [[]] }).fetchAll()).to.deep.equal([]);
        });

        it('returns an array containing all items in the result set', () => {
            const row = { toArray };
            const docs = [{ name: 'foo' }, { name: 'bar' }];

            td.when(toArray()).thenReturn([docs[1]]);
            td.when(toArray(), { times: 1 }).thenReturn([docs[0]]);

            expect(docResult({ results: [[row, row]] }).fetchAll()).to.deep.equal(docs);
        });
    });

    context('fetchOne()', () => {
        it('returns undefined when there are no items in the result set', () => {
            /* eslint-disable no-unused-expressions */
            expect(docResult().fetchOne()).to.not.exist;
            expect(docResult({ results: undefined }).fetchOne()).to.not.exist;
            expect(docResult({ results: [] }).fetchOne()).to.not.exist;
            /* eslint-enable no-unused-expressions */
            return expect(docResult({ results: [[]] }).fetchOne()).to.not.exist;
        });

        it('returns the next available item in the result set', () => {
            const row = { toArray };
            const docs = [{ name: 'foo' }];

            td.when(toArray()).thenReturn(docs);

            expect(docResult({ results: [[row]] }).fetchOne()).to.deep.equal(docs[0]);
        });
    });

    context('getWarnings()', () => {
        it('returns the list of warnings generated by the server for a given operation', () => {
            const warnings = ['foo', 'bar'];

            expect(docResult({ warnings }).getWarnings()).to.deep.equal(warnings);
        });
    });

    context('getWarningsCount()', () => {
        it('returns the number of warnings generated by the server for a given operation', () => {
            const warnings = ['foo', 'bar', 'baz'];

            expect(docResult({ warnings }).getWarningsCount()).to.deep.equal(3);
        });
    });

    context('toArray()', () => {
        it('returns the raw list of result set items', () => {
            const row = { toArray };
            const docs = [{ name: 'foo' }];

            // eslint-disable-next-line no-unused-expressions
            expect(docResult({ results: [] }).toArray()).to.be.an('array').and.be.empty;

            td.when(toArray()).thenReturn(docs);

            expect(docResult({ results: [[row]] }).toArray()).to.deep.equal(docs);
        });
    });
});
